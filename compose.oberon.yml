services:

  traefik:
    image: traefik:${TRAEFIK_VERSION:-latest}
    container_name: traefik
    restart: unless-stopped
    ports:
      - 443:443
    networks:
      - proxy
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
      - TZ=${TZ:-Europe/London}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${VOL_PATH}/traefik/certificates:/letsencrypt:rw
      - ${VOL_PATH}/traefik/config:/etc/traefik:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik-rtr.entrypoints=websecure
      - traefik.http.routers.traefik-rtr.rule=Host(`traefik-int.${DOMAIN:-docker.localhost}`)
      - traefik.http.routers.traefik-rtr.service=api@internal

  jellyfin:
    image: jellyfin/jellyfin:${JELLYFIN_VERSION:-latest}
    container_name: jellyfin
    restart: unless-stopped
    user: 1003:100
    networks:
      - proxy
    environment:
      - JELLYFIN_PublishedServerUrl=https://media.${DOMAIN:-docker.localhost}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=all
      - TZ=${TZ:-Europe/London}
    volumes:
      - ${VOL_PATH}/jellyfin/config:/config:rw
      - ${VOL_PATH}/jellyfin/cache:/cache:rw
      - ${MEDIA_PATH}:/media:ro
    devices:
      - /dev/dri:/dev/dri
      - /dev/nvidia0:/dev/nvidia0
      - /dev/nvidiactl:/dev/nvidiactl
      - /dev/nvidia-uvm:/dev/nvidia-uvm
      - /dev/nvidia-uvm-tools:/dev/nvidia-uvm-tools
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin-rtr.entrypoints=websecure
      - traefik.http.routers.jellyfin-rtr.rule=Host(`media.${DOMAIN:-docker.localhost}`)
      - traefik.http.routers.jellyfin-rtr.service=jellyfin-svc
      - traefik.http.services.jellyfin-svc.loadbalancer.server.port=8096
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  immich:
    image: ghcr.io/imagegenius/immich:${IMMICH_VERSION:-latest}
    container_name: immich
    restart: unless-stopped
    networks:
      - proxy
      - immich
    depends_on:
      immich-redis:
        condition: service_healthy
      immich-database:
        condition: service_healthy
    environment:
      - PUID=${HOMELABUID:-1000}
      - PGID=${USERSGID:-1000}
      - TZ=${TZ}
      - DB_HOSTNAME=${IMMICH_DB_HOST:-immich-database}
      - DB_USERNAME=${IMMICH_DB_USER:-immich}
      - DB_PASSWORD=${IMMICH_DB_PASS:-insecurePass}
      - DB_DATABASE_NAME=${IMMICH_DB_NAME:-immichdb}
      - REDIS_HOSTNAME=${IMMICH_REDIS_HOST:-immich-redis}
    volumes:
      - ${VOL_PATH}/immich/config:/config
      - ${GALLERY_PATH}/immich:/photos
      - ${GALLERY_PATH}/upload:/libraries
    labels:
      - traefik.enable=true
      - traefik.http.routers.immich-rtr.rule=Host(`photos.${DOMAIN:-docker.localhost}`)
      - traefik.http.routers.immich-rtr.entrypoints=websecure
      - traefik.http.routers.immich-rtr.service=immich-svc
      - traefik.http.services.immich-svc.loadbalancer.server.port=8080

  immich-redis:
    image: redis:6.2-alpine
    container_name: immich_redis
    restart: unless-stopped
    networks:
      - immich
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  immich-database:
    image: tensorchord/pgvecto-rs:pg14-v0.2.0
    container_name: immich_database
    restart: unless-stopped
    user: 1003:100
    networks:
      - immich
    environment:
      - POSTGRES_PASSWORD=${IMMICH_DB_PASS:-insecurePass}
      - POSTGRES_USER=${IMMICH_DB_USER:-immich}
      - POSTGRES_DB=${IMMICH_DB_NAME:-immichdb}
      - POSTGRES_INITDB_ARGS='--data-checksums'
    volumes:
      - ${VOL_PATH}/immich/data:/var/lib/postgresql/data:rw
    healthcheck:
      test: pg_isready -U ${IMMICH_DB_USER:-immich} -d ${IMMICH_DB_NAME:-immichdb}
      interval: 10s
      timeout: 2s
      retries: 10
    command: >-
      postgres
      -c shared_preload_libraries=vectors.so
      -c 'search_path="$$user", public, vectors'
      -c logging_collector=on
      -c max_wal_size=2GB
      -c shared_buffers=512MB
      -c wal_compression=on

  qbittorrent:
    image: linuxserver/qbittorrent:${QBITTORRENT_VERSION:-latest}
    container_name: qbittorrent
    ports:
      - 6881:6881
      - 6881:6881/udp
    environment:
      - PUID=${HOMELABUID:-1000}
      - PGID=${USERSGID:-1000}
      - TZ=${TZ}
      - WEBUI_PORT=8080
      - TORRENTING_PORT=6881
    volumes:
      - ${VOL_PATH}/qbittorrent/config:/config:rw
      - ${DOWNLOAD_PATH}/qbittorrent:/downloads:rw
      - ${DOWNLOAD_PATH}/qbittorrent/watch:/watch:rw
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.qbittorrent-rtr.entrypoints=websecure
      - traefik.http.routers.qbittorrent-rtr.rule=Host(`torrent.${DOMAIN:-docker.localhost}`)
      - traefik.http.routers.qbittorrent-rtr.service=qbittorrent-svc
      - traefik.http.services.qbittorrent-svc.loadbalancer.server.port=8080
    restart: unless-stopped

volumes:
  immich-cache:

networks:
  immich:
    name: immich
  proxy:
    name: proxy
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.19.0.0/16
